{"version":3,"sources":["canyon.js","green_fields.js","main.js","perlin.js","tree.js"],"names":[],"mappings":"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","file":"all.js","sourcesContent":["'use strict';\n\n/* global window, _ */\n\n(function () {\n\n    var sketches = window.sketches || {};\n    window.sketches = sketches;\n\n    var sketch = function (p) {\n\n        var gaussNoiseLine = function (x1, y1, x2, y2) {\n            \n            var steps = 10;\n            var xrange = Math.abs(x2 - x1);\n            var yrange = y2 - y1;\n            var xstep = xrange / steps;\n            var ystep = yrange / steps;\n\n            var xgaussFactor = 20;\n            var ygaussFactor = 10;\n\n            var linePoints = [];\n            \n            var lastx = x1;\n            var lasty = y1;\n\n            _.range(steps).forEach( i => {\n                var xn = xstep * i + p.randomGaussian() * xgaussFactor;\n                var yn = ystep * i + y1 + p.randomGaussian() * ygaussFactor;\n                // p.line(lastx, lasty, xn, yn);\n                linePoints.push([lastx, lasty, xn, yn]);\n                lastx = xn;\n                lasty = yn;\n            });\n\n            // p.line(lastx, lasty, x2, y2);\n            linePoints.push([lastx, lasty, x2, y2]);\n\n            return linePoints;\n\n        };\n\n        var drawLine = function (points) {\n            p.strokeWeight(1);\n            points.forEach(line => p.line.apply(this, line));\n        };\n\n        var drawShape = function (lines1, i) {\n\n            p.fill(100 + i * 15);\n            p.strokeWeight(1);\n            p.beginShape();\n            lines1.forEach(line => {\n                p.vertex(line[0], line[1]);\n                p.vertex(line[2], line[3]);\n            });\n            p.vertex(460, 460);\n            p.vertex(0, 460);\n            p.endShape();\n        };\n\n        var interpolateBetweenLines = function (lines1, lines2, step) {\n            \n            var steps = 200;\n            return lines1.map(function (line1, i) {\n                var line2 = lines2[i];\n                return line1.map(function (pt1, ii) {\n                    var pt2 = line2[ii];\n                    return pt1 + ((pt2 - pt1) / steps) * step;\n                });\n            });\n        };\n\n        var drawStripes = function (lines1) {\n\n            lines1.forEach(line1 => {\n                \n                var [l1x1, l1y1, l1x2, l1y2] = line1;\n\n                var l1xrange = l1x2 - l1x1;\n                var l1yrange = l1y2 - l1y1;\n                \n                var length = Math.sqrt(Math.pow(l1xrange, 2) + Math.pow(l1yrange, 2));\n                var strokey = (l1yrange / length);\n\n                p.strokeCap(p.SQUARE);\n\n                var fill = Math.max(0, Math.min(110 + strokey * 120, 255));\n\n                p.fill(0, 0, 0, 100 / 255 * fill);\n                p.beginShape();\n                p.vertex(l1x1, l1y1);\n                p.vertex(l1x2, l1y2);\n                p.vertex(l1x2, l1y2 + 200);\n                p.vertex(l1x1, l1y1 + 200);\n                p.endShape();\n\n                // var steps = length / 5;\n                // var steps = 10;\n                // console.log(steps);\n                // for (var j = 0; j < steps; j++) {\n                //     var xn = l1x1 + l1xrange / steps * j;\n                //     var yn = l1y1 + l1yrange / steps * j;\n                //     p.line(xn, yn, xn, yn + 200);\n                // }\n\n            });\n\n        };\n\n        var current = {\n            lines: [],\n        };\n\n        var lines = 2 * 5;\n        var ystep = 50;\n\n        for (var i = 0; i < lines; i++) {\n            var y = 460 / lines * i;\n            current.lines.push([gaussNoiseLine(0, y, 460, y + ystep), gaussNoiseLine(0, y, 460, y + ystep), 0]);\n\n        }\n        // Override draw function, by default it will be called 60 times per second\n        p.draw = function () {\n            \n            p.background(80);\n\n            var interpolatedLines = [];\n\n            current.lines.forEach(lines => {\n                \n                if (lines[2] === 200) {\n                    \n                    lines[0] = lines[1];\n                    var y1old = lines[0][0][1];\n                    var y2old = lines[0][lines[0].length - 1][3];\n                    // console.log(y1old, y2old, lines, lines[0].length - 1);\n                    lines[1] = gaussNoiseLine(0, y1old, 460, y2old);\n                    lines[2] = 0;\n                }\n                \n                var line = interpolateBetweenLines(lines[0], lines[1], lines[2]);\n                lines[2]++;\n                interpolatedLines.push(line);\n            });\n            \n            for (var i = 0; i < interpolatedLines.length; i += 2) {\n                drawStripes(interpolatedLines[i]);\n                drawShape(interpolatedLines[i + 1], i);\n                drawLine(interpolatedLines[i]);\n            }\n        };\n    \n        p.setup = function () {\n            p.size(460, 460);\n            p.frameRate(10);\n            // p.noLoop();\n            p.smooth();\n            p.colorMode(p.RGB);\n        };\n\n    };\n\n\n    var title = 'Canyon';\n    var description = 'An attempt to create a canyion-like visualisation. The color is set according to the slope to create a light-impression.';\n\n    sketches.canyon = {\n        sketch: sketch,\n        title: title,\n        description: description\n    };\n\n})();\n","'use strict';\n\n/* global window */\n\n(function () {\n\n    var sketches = window.sketches || {};\n    window.sketches = sketches;\n\n    var sketch = function (p) {\n\n        var drawGreenRectangle = function (x1, y1, x2, y2) {\n            p.fill(p.random(50, 100), p.random(100, 255), p.random(180, 220));\n            p.stroke(180);\n            p.quad(x1, y1, x1, y2, x2, y2, x2, y1);\n        };\n\n        var drawGreenFields = function (x1, y1, x2, y2, depth) {\n            var border = 0;\n            var threshold = 50;\n            var randomRange = 30;\n\n            var randomState = p.random(0, randomRange);\n\n            x1 += border;\n            y1 += border;\n            x2 -= border;\n            y2 -= border;\n\n            var xRange = Math.abs(x1 - x2);\n            var yRange = Math.abs(y1 - y2);\n\n            var xn = p.random(x1, x2);\n            var yn = p.random(y1, y2);\n\n            var rects = {\n                x: [[x1, y1, x2, yn], [x1, yn, x2, y2]],\n                y: [[x1, y1, xn, y2], [xn, y1, x2, y2]],\n                none: []\n            };\n\n            var state;\n            if (depth > 20) {\n                state = 'none';\n            } else if (threshold > xRange && threshold > yRange) {\n                state = 'none';\n            } else if (randomState <= 15) {\n                state = threshold > xRange ? 'x' : 'y';\n            } else if (randomState >= 15) {\n                state = threshold > yRange ? 'y' : 'x';\n            } else {\n                state = 'none';\n            }\n\n            rects[state].forEach(function(rect) {\n                drawGreenRectangle.apply(this, rect);\n            });\n\n            rects[state].forEach(function (rect) {\n                var args = rect.concat([depth + 1]);\n                drawGreenFields.apply(this, args);\n            });\n\n        };\n\n        p.setup = function () {\n            p.size(460, 460);\n            // p.frameRate(1);\n            p.noLoop();\n            p.colorMode(p.HSB);\n        };\n\n       // Override draw function, by default it will be called 60 times per second\n        p.draw = function () {\n            drawGreenFields(0, 0, 460, 460, 0);\n        };\n    };\n\n    var title = 'Green Fields';\n    var description = 'Inspired by the great plains in the USA, this sketch tries to simulate fields.';\n\n    sketches.greenFields = {\n        sketch: sketch,\n        title: title,\n        description: description\n    };\n\n})();\n","'use strict';\n\n/* global Processing, document, window, React */\n\nwindow.addEventListener('load', function () {\n\n    var sketches = window.sketches || {};\n    window.sketches = sketches;\n\n    var ReactCanvas = React.createFactory(React.createClass({\n        displayName: 'reactCanvas',\n        componentDidMount: function () {\n            var el = this.getDOMNode();\n            var processingInstance = new Processing(el, this.props.sketch.sketch);\n        },\n        componentWillUnmount: function () {\n            return true;\n        },\n        render: function () {\n            return React.createElement('canvas', {});\n        }\n    }));\n\n    var Sketch = React.createFactory(React.createClass({\n        displayName: 'sketch',\n        render: function () {\n            var that = this;\n            /* jshint ignore:start */\n            return (\n                <div className='sketch'>\n                    <div className='sketch_description'>\n                        <div className='sketch_description_main'>{that.props.sketch.title}</div>\n                        <div className='sketch_description_sub'>{that.props.sketch.description}</div>\n                    </div>\n                    <div className='sketch_canvas'>\n                        <ReactCanvas sketch={that.props.sketch} />\n                    </div>\n                </div>\n            );\n            /* jshint ignore:end */\n        }\n    }));\n\n    // iterate over all sketches\n    var Sketches = React.createFactory(React.createClass({\n        displayName: 'sketches',\n        getInitialState: function () {\n            return sketches;\n        },\n        render: function () {\n            var that = this;\n            var keys = Object.keys(that.state);\n            var sketchArray = keys.map(function (k) {\n                return sketches[k];\n            });\n            /* jshint ignore:start */\n            return (\n                <div className=\"sketches\">\n                    {sketchArray.map(sketch => new Sketch({sketch: sketch}))}\n                </div>\n            );\n            /* jshint ignore:end */\n        }\n    }));\n\n    React.render(new Sketches(), document.getElementById('react'));\n\n});\n","'use strict';\n\n/* global window, _ */\n\n(function () {\n\n    var sketches = window.sketches || {};\n    window.sketches = sketches;\n\n    var sketch = function (p) {\n\n        class Point {\n        \n            constructor (x, y) {\n                \n                this.x = x;\n                this.y = y;\n                this.xv = 0;\n                this.yv = 0;\n                this.maxSpeed = 30000000;\n\n            }\n\n            update () {\n            \n                p.stroke(0, 16);\n                this.xv =   Math.cos(p.noise(this.x * 0.01, this.y * 0.01) * Math.PI * 2);\n                this.yv = - Math.sin(p.noise(this.x * 0.01, this.y * 0.01) * Math.PI * 2);\n\n                if (this.x > width || this.y > height || this.x < 0 || this.y < 0) {\n                    this.finished = true;\n                }\n\n                this.xv = Math.max(-this.maxSpeed, Math.min(this.maxSpeed, this.xv));\n                this.yv = Math.max(-this.maxSpeed, Math.min(this.maxSpeed, this.yv));\n             \n                this.x += this.xv;\n                this.y += this.yv;\n                p.line(this.x + this.xv, this.y + this.yv, this.x, this.y);\n\n            }\n        }\n\n        var points = [];\n        var width = 460;\n        var height = 460;\n\n        p.setup = function () {\n            p.size(460, 460);\n            // p.noLoop();\n            p.frameRate(30);\n            p.smooth();\n            p.colorMode(p.HSB);\n            addPoints(10000);\n            p.background(255, 0, 0, 0);\n        };\n\n        var addPoints = function (n) {\n            _.each(_.range(n), function () {\n                var x = p.random(0, width);\n                var y = p.random(0, height);\n                points.push(new Point(x, y));\n            });\n        };\n\n\n        p.draw = function () {\n\n            points = points.filter(point => !point.finished);\n            points.forEach(point => point.update());\n\n        };\n    };\n\n    var title = 'Perlin';\n    var description = 'Perlin Noise.';\n\n    sketches.perlin = {\n        sketch: sketch,\n        title: title,\n        description: description\n    };\n\n})();\n","'use strict';\n\n/* global window */\n\n(function () {\n\n    var sketches = window.sketches || {};\n    window.sketches = sketches;\n\n    var sketch = function (p) {\n\n        var degToRad = function (deg) {\n            return Math.PI / 360 * deg;\n        };\n\n        var toX = function (r, rad) {\n            return r * Math.cos(rad);\n        };\n\n        var toY = function (r, rad) {\n            return r * Math.sin(rad);\n        };\n\n        var drawQuad = function (x1, y1, x2, y2, l1, l2, rad) {\n            \n            p.fill(0);\n            p.stroke(0, 0, 0, 0);\n\n            var radOrt = rad + Math.PI / 2;\n            var ln = l1 / 2;\n            var cs = [];\n            \n            cs.push(x1 + toX(ln, radOrt));\n            cs.push(y1 + toY(ln, radOrt));\n            cs.push(x1 + toX(-ln, radOrt));\n            cs.push(y1 + toY(-ln, radOrt));\n            \n            ln = l2 / 2;\n            cs.push(x2 + toX(-ln, radOrt));\n            cs.push(y2 + toY(-ln, radOrt));\n            cs.push(x2 + toX(ln, radOrt));\n            cs.push(y2 + toY(ln, radOrt));\n\n            p.quad.apply(this, cs);\n        };\n\n        var drawLine = function (x, y, radian, length) {\n\n            var threshold = 5;\n            var branches = p.random(2, 5);\n            // var branches = 1;\n            var strokeWeight = 0.08 * length;\n\n            length *= (p.random(8, 12) / 10);\n\n            if (length < threshold) {\n                return;\n            }\n            \n            var minrad = -5;\n            var maxrad = 5;\n\n            var radD = degToRad(p.random(minrad, maxrad));\n            // var radD = 0;\n\n            var rN = radian + radD;\n\n            var xD = toX(length, rN);\n            var yD = toY(length, rN);\n\n            var xN = xD + x;\n            var yN = yD + y;\n\n            p.strokeWeight(strokeWeight * 0.4);\n            if (strokeWeight < 2) {\n                p.strokeWeight(strokeWeight);\n                p.line(x, y, xN, yN);\n            } else {\n                drawQuad(x, y, xN, yN, strokeWeight, strokeWeight / 2, rN);\n            }\n\n            var radRange = p.random(180, 220);\n\n            var start = -radRange / 1.7; // no idea why it looks better than with 2\n            var step  = radRange / branches;\n\n            for (var i = 1; i <= branches; i++) {\n                \n                var rad = start + step * i;\n\n                var randomLength = p.random(-length / 3);\n\n                var xNN = xN + toX(randomLength, rN);\n                var yNN = yN + toY(randomLength, rN);\n                var rNN = rN + degToRad(rad);\n\n                // the first branch will be drawn directly on top of the last one\n                if (i === Math.ceil(branches / 2)) {\n                    xNN = xN;\n                    yNN = yN;\n                }\n\n                drawLine(xNN, yNN, rNN, length / 1.5);\n            }\n        };\n\n        p.setup = function () {\n            p.size(460, 460);\n            p.noLoop();\n            // p.frameRate(1);\n            p.smooth();\n            p.colorMode(p.HSB);\n        };\n\n       // Override draw function, by default it will be called 60 times per second\n        p.draw = function () {\n            p.background(255, 0, 0, 0);\n            drawLine(230, 460, -Math.PI / 2, 460 / 4);\n        };\n    };\n\n    var title = 'Tree';\n    var description = 'A simple tree with sophisticated branching.';\n\n    sketches.tree = {\n        sketch: sketch,\n        title: title,\n        description: description\n    };\n\n})();\n"],"sourceRoot":"/source/"}